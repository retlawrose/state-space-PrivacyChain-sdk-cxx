// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <hpp>
#import std.string
namespace iab::privacychain::constructor {
  //
  // Generate a constructor call from the flexible types given
  //
  // The "constructor" is what the Hyperledger Fabric crew calls
  //   "remote procedure call"
  //   "stored procedure call"
  //   "chain code call"
  //
  // Schema:
  //
  //   { "Args" : [ ... values... ] }
  //
  // Usage:
  //
  //   auto ctor = generate("init", 123456);
  //   auto ctor = generate("set", 123456, "fd28e534850d425c93e5e145452ba455");
  //   auto ctor = generate("get", 123456);
  //   auto ctor = generate("history", 123456);
  // 
  template<typename... TYPES> inline auto generate(TYPES const &...) -> std::string;
}
#endiv
#divert <ipp>
#import hyperledger.fabric.peer.chaincode.call // ARGS
#import iab.privacychain.constructor.Arguments
#import json.as
#import json.Value
#import json.value.constants // OBJECT, ARRAY - but for module-json-devel < 0.7.0 you need json.value.type to get ARRAY
namespace iab::privacychain {
  template<typename... TYPES> auto constructor::generate(TYPES const &...items) -> std::string {
    //
    // container ::=  { "Args" : [ ...items... ] }
    //
    json::Value container{json::value::OBJECT};
    auto &args = container[hyperledger::fabric::peer::chaincode::ARGS] = json::Value{json::value::ARRAY};
    Arguments arguments{args};
    arguments.append(items...);
    return json::as<std::string>(container);
  }
}
#endiv
