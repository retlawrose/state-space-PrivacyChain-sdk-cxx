// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <fpp>
namespace iab::privacychain::operation {
  //
  // The basis of every operation on the database
  // Descendants only.
  //
  // The lifetime of the supplied Context must be longer than that of the Operation
  //
  // Descendants: Operation<QUERY>, Operation<INVOKE>
  //
  // Usage:
  //
  //   class my::Operation : public operation::Basis {
  //     ancestor = operation::Basis;
  //   public:
  //     explicit Operation(Context const &context) : ancestor{context} { }
  //   };
  //
  class Basis;
}
#endiv
#divert <hpp>
#import hyperledger.fabric.peer.chaincode.Call
#import iab.privacychain.Outcome
#import iab.privacychain.Success
#import iab.privacychain.Function
#import iab.privacychain.Key
#import iab.privacychain.Record
class iab::privacychain::operation::Basis {
public:
  using Context = hyperledger::fabric::peer::chaincode::Call;
protected:
  virtual ~Basis() = default;
  inline explicit Basis(Context &context) : context{context} { }
public:
  virtual auto run(Function const &, Key const &) -> Outcome<Record> = 0;
  virtual auto run(Function const &, Key const &, Record const &) -> Success = 0;
protected:
  // This needs to be mutable because all the remote procedure calls require mutable context
  Context &context;
};
#endiv
