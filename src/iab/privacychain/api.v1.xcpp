// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import iab.privacychain.operation.Operation
namespace iab::privacychain::api {
  inline
  namespace v1 {
    // Ugly ugly ugly ... make ADL work for api::v1 by forcing a new type, not a type alias or using declaration of a template.
    // Scheme:
    //
    //    iab::privacychain::api::Operation<iab::privacychain::api::INVOKE> op{ctx}; <--------- all the namespace problems hang here
    //    ...
    //    set(op, key) <----------------------------------------------------------------------- ADL finds these
    //    set(op, key, record) <------- ibidem.
    //    history(op, key) <----------- ibidem.
    //
    using operation::Operator;
    using operation::QUERY;
    using operation::INVOKE;
    // enum Operator { QUERY = (int)operation::QUERY, INVOKE = (int)operation::INVOKE };
    template<Operator OO> struct Operation : public operation::Operation<operation::Operator((int)OO)> {
      using operation::Operation<operation::Operator((int)OO)>::Operation;
    };
  }
}
#endiv
#divert <hpp>
//
// These match 1-for-1 the interface of the Privacy Chain Code
// They allow you to call the chaincode API "as if" it were a local function call.
// In fact, it's just a *remote* procedure call to the stored procedure in the database.
//
// All these calls block the calling thread.
// If you want multiple concurrent calls (multi-threading) you have to set that up yourself.
//
#import std.string_literals
#forward iab.privacychain.operation.Operation
#forward iab.privacychain.Function
namespace iab::privacychain::api::v1 {
  namespace constants {
    //
    // The canonical function names of the Privacy Chain Code.
    //
    // e.g. 
    //   {"Args":["init","chicken"]}
    //   {"Args":["set","chicken", "egg"]}
    //   {"Args":["get","chicken"]}
    //   {"Args":["history","chicken"]}
    //
    using namespace std::string_literals;
    inline auto const GET = Function{"get"};
    inline auto const SET = Function{"set"};
    inline auto const HISTORY = Function{"history"};
    using namespace operation::constants; // QUERY, INVOKE
  }
  using namespace constants;
}
#import iab.privacychain.Outcome
#import iab.privacychain.Success
#import iab.privacychain.Key
#import iab.privacychain.Record
#import iab.privacychain.Operation
#import iab.privacychain.History
namespace iab::privacychain::api::v1 {
  //
  // Usage:
  //
  //   Operation<Query> qq{...somehow...};
  //   auto got = qq.get(key);
  //   if (ok(got)) {
  //      auto const &vv = value(got);
  //      ...use vv...
  //   } else {
  //      auto ec = error_code(got);
  //      cerr << "fail: " << ec.message() << '\n';
  //   }
  //
  inline auto get(Operation<QUERY> &, Key const &) -> Outcome<Record>;
  auto set(Operation<QUERY> &, Key const &, Record const &) -> Success = delete;
  inline auto history(Operation<QUERY> &, Key const &) -> Outcome<History>;
}
#import iab.privacychain.Operation
namespace iab::privacychain::api::v1 {
  //
  // Usage: same (you have the idea, surely).
  //
  inline auto get(Operation<INVOKE> &, Key const &) -> Outcome<Record>;
  inline auto set(Operation<INVOKE> &, Key const &, Record const &) -> Success;
  inline auto history(Operation<INVOKE> &, Key const &) -> Outcome<History>;
}
#endiv
#divert <ipp>
namespace iab::privacychain::api {
  using namespace std::string_literals; // everyone gets this
}
namespace iab::privacychain::api {
  auto v1::get(Operation<QUERY> &op, Key const &key) -> Outcome<Record> {
    return op.run(GET, key);
  }
  auto v1::get(Operation<INVOKE> &op, Key const &key) -> Outcome<Record> {
    return op.run(GET, key);
  }
}
namespace iab::privacychain::api {
  auto v1::set(Operation<INVOKE> &op, Key const &key, Record const &value) -> Success {
    return op.run(SET, key, value);
  }
}
#import iab.privacychain.history.v1.deserialize
namespace iab::privacychain::api {
  auto v1::history(Operation<QUERY> &op, Key const &key) -> Outcome<History> {
    return history::v1::deserialize(op.run(HISTORY, key));
  }
  auto v1::history(Operation<INVOKE> &op, Key const &key) -> Outcome<History> {
    return history::v1::deserialize(op.run(HISTORY, key));
  }
}
#endiv
