// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace iab::privacychain::traits {
  //
  // Is this TYPE a return type of deserializable(...)?
  // Most are not.
  //
  template<typename TYPE> struct Is_Deserializable;
  // Specializations will be with the respective class name declarations; e.g. transaction::History
}
#endiv
#divert <hpp>
#import std.false_type
namespace iab::privacychain {
  template<typename TYPE> struct traits::Is_Deserializable : public std::false_type {};
}
#endiv
#divert <cpp>
// this is test code
#import std.string
#import json.Value
#import iab.privacychain.History
#import iab.privacychain.transaction.Identifier
namespace iab::privacychain {
  static_assert(!traits::Is_Deserializable<bool>::value);
  static_assert(!traits::Is_Deserializable<std::string>::value);
  static_assert(!traits::Is_Deserializable<time::Point>::value);
  static_assert(!traits::Is_Deserializable<json::Value>::value);
  static_assert(!traits::Is_Deserializable<transaction::Identifier>::value);
  static_assert(traits::Is_Deserializable<History>::value);
}
#endiv
