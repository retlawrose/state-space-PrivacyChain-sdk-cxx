// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import iab.privacychain.detail.Formatter.template
#import iab.privacychain.key.Key
namespace iab::privacychain::detail {
  //
  // Formatting a PrivacyChain database key.
  //
  // Lifetimes:
  //   The lifetime of the key must be longer than that of the Formatter (by convention).
  //   If you want persistent capture, then use to_string(...)
  //
  // Usage:
  //
  //   Key key{...somehow...};
  //   std::cerr << format(key);
  //
  template<> struct Formatter<key::Key>;
}
#endiv
#divert <hpp>
#import iab.privacychain.required.Character
#import iab.privacychain.required.Character_Traits
#import std.basic_ostream
namespace iab::privacychain::detail {
  template<required::Character CHAR, required::Character_Traits TRAITS>
  inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Formatter<key::Key> const &) -> std::basic_ostream<CHAR, TRAITS> &;
}
template<> struct iab::privacychain::detail::Formatter<iab::privacychain::key::Key> {
  using Value = key::Key;
  inline Formatter(Value const &value) : value{value} { }
  Value const &value;
};
#endiv
#divert <ipp>
namespace iab::privacychain::detail {
  template<required::Character CHAR, required::Character_Traits TRAITS>
  auto operator<<(std::basic_ostream<CHAR, TRAITS> &o, Formatter<key::Key> const &f) -> std::basic_ostream<CHAR, TRAITS> & {
    return key::to_stream(o, f.value);
  }
}
#endiv
