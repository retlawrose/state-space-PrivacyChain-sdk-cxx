// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import iab.privacychain.operation.Operation.template
namespace iab::privacychain::operation {
  //
  // A read (only) query on the data base; also see Operation<INVOKE>.
  //
  // May use locally-cached data.
  // May use process-local cached data
  // May use cluster-local cached data.
  //
  // When using a SQL data store ... may use data cached anywhere back to the origin server.
  // When using a Ledger database, does not invoke chaincode.
  //
  // The lifetime of the context must be longer than that of the Operation<QUERY>
  //
  // Usage:
  //
  //   Operation<QUERY> read{context};
  //   auto got = read(key);
  //   if (ok(got)) {
  //     auto payload = value(std::move(got));
  //     ...
  //   } else {
  //     auto ec = error_code(got);
  //     ...
  //   }
  //
  template<> class Operation<QUERY>;
}
#endiv
#divert <hpp>
#import iab.privacychain.operation.Basis
namespace iab::privacychain::operation {
  template<> class Operation<QUERY> : public Basis {
    using Ancestor = Basis;
  public:
    inline explicit Operation(Context &);
    auto run(Function const &, Key const &) -> Outcome<Record> override;
    auto run(Function const &, Key const &, Record const &) -> Success override;
  };
}
#endiv
#divert <ipp>
namespace iab::privacychain::operation {
  Operation<QUERY>::Operation(Context &context) : Ancestor{context} { }
}
#endiv
#divert <cpp>
#import hyperledger.fabric.peer.chaincode.query
#import iab.privacychain.constructor.generate
#import std.vector
#import std.byte
namespace iab::privacychain::operation {
  auto Operation<QUERY>::run(Function const &function, Key const &key) -> Outcome<Record> {
    // decode...schema(...) captures the exceptional cases.
    return decode_record_versioned_schema(hyperledger::fabric::peer::chaincode::query<std::vector<std::byte>>(context, constructor::generate(function, key)));
  }
  auto Operation<QUERY>::run(Function const &function, Key const &key, Record const &record) -> Success try {
    auto called = hyperledger::fabric::peer::chaincode::query(context, constructor::generate(function, key, record));
    return !ok(called) ? Success{error_code(called)} : Success{SUCCESS};
  } catch (std::error_code const &ec) {
    return Success{ec};
  }
}
#endiv
