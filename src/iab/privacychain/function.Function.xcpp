// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import std.char_traits
#import std.basic_string
namespace iab::privacychain::function {
  //
  // A chaincode function (name).
  //
  // Crudely (for now) a function on the chaincode is named with its (string) name
  //
  // Usage:
  //
  //   auto context = Context{...somehow...};
  //   auto reader = Reader{context};
  //
  //   auto function = Function{"get"};
  //
  //   auto key = Key{...somehow...};
  //   auto got = read(function, key);
  //   if (ok(got)) {
  //      ...good...
  //   } else {
  //      ...bad...
  //   }
  //
  class Traits : public std::char_traits<char> { };
  using Function = std::basic_string<char, Traits>;
}
#endiv
#divert <hpp>
#import std.to_string
namespace iab::privacychain::function {
  inline auto to_string(Function) -> std::string;
}
#endiv
#divert <ipp>
auto iab::privacychain::function::to_string(Function f) -> std::string {
  // [[FIXTHIS]] this is a gratuitous copy (of something small); but there is no way to move-semantic between different string-by-traits
  return std::string{f.begin(), f.end()};
}
#endiv
