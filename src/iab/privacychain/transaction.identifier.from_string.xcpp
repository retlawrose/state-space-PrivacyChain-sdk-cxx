// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <hpp>
#import c.const_stringz
#import re.string
#import iab.privacychain.transaction.Identifier
#import iab.privacychain.Outcome
namespace iab::privacychain::transaction::identifier {
  //
  // Extract a transaction identifier from a string
  // Throws if it cannot accomplish its mission (of constructing an Identifier)
  //
  // This is a separable function because...
  //   it is a friend of the class
  //   for testability
  //
  // Requires:
  //   64 == length
  //   hexidecimal characters
  //
  // Usage:
  //
  //    auto out = from_string(syntax);
  //    if (ok(out)) {
  //      ... you know the drill...
  //    } else {
  //      ... you know the drill...
  //    }
  //
  inline auto from_string(re::string<c::const_stringz>) -> Outcome<Identifier>;
}
#endiv
#divert <ipp>
#import iab.privacychain.transaction.identifier.From_String
#import iab.privacychain.detail.dehex
#import iab.privacychain.error.Code
#import std.error_code
auto iab::privacychain::transaction::identifier::from_string(re::string<c::const_stringz> syntax) -> Outcome<Identifier> {
  using Result = Outcome<Identifier>;
  try {
    if (64 == syntax.size()) {
      transaction::Identifier ret;
      From_String fs{ret};
      unsigned i{0};
      for (auto c : syntax) {
        // reminder: dehex will throw if it cannot dehex the character into bits
        using privacychain::detail::dehex;
        for (auto b : dehex(c)) {
          fs[i++] = b;
        }
      }
      return Result{ret};
    }
    return Result{std::error_code{error::Code::PAYLOAD_BAD_FIELD}};
  } catch (std::error_code const &ec) {
    return Result{ec};
  }
}
#endiv
