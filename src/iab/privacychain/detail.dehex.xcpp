// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <hpp>
#import std.array
namespace iab::privacychain::detail {
  //
  // Convert a hexidecimal character into its 4-bit format
  //
  // The dehex is an implementation detail envisioned for use within transaction payload parsing.
  // It throws std::error_code{PAYLOAD_BAD_FIELD} if it cannot perform its function.
  // Such non-performance is expected to be very exceptional (rare).
  //
  // array<bool>  is naturally little endian
  // char (octet) is *pictured* as big endian
  //          but is accessed in little endian order.
  //
  //          /--------------- bit 3 
  //          | /------------- bit 2 
  //          | | /----------- bit 1 
  //          | | | /--------- bit 0 
  //          v v v v
  //   '0'    0 0 0 0
  //    ...
  //   '9'    1 0 0 1
  //   'a'    1 0 1 0
  //    ...
  //   'f'    1 1 1 1
  //
  // Usage:
  //
  //   auto bits = dehex('a');
  //
  inline auto dehex(char c) -> std::array<bool, 4>;
}
#endiv
#divert <ipp>
#import iab.privacychain.error.Code
#import std.error_code
#import std.isxdigit
#import std.toupper
#import std.move
auto iab::privacychain::detail::dehex(char candidate_hexchar_syntax) -> std::array<bool, 4> {
  using Result = std::array<bool, 4>;
  auto candidate_nibble_value = [](char syntax) {
                                  if (!std::isxdigit(syntax)) {
                                    throw std::error_code{error::Code::PAYLOAD_BAD_FIELD};
                                  }
                                  if ('0' <= syntax && syntax <= '9') {
                                    return syntax - '0';
                                  } else {
                                    // See the note in the interface from RFC 3986 about the use of upper case.
                                    return std::toupper(syntax) - 'A' + 10;
                                  }
                                }(candidate_hexchar_syntax);
  // Network order (database order) is "big endian" and especially so for octets and their fragments.
  // RFC 1700, http://tools.ietf.org/html/rfc1700, 1980-04-01; and elsewhere.
  auto const WIDTH = 4u;
  Result ret;
  for (auto bit{0u}; WIDTH != bit; ++bit) {
    auto const mask = 1u << bit;
    auto ping = 0 != (mask & candidate_nibble_value);
    ret[bit] = ping;
  }
  return ret;
}
#endiv
