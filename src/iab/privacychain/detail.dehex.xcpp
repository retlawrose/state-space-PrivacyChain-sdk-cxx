// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <hpp>
#import std.array
namespace iab::privacychain::detail::deserialize {
  //
  // Convert a hexidecimal character into its 8-bit format
  //
  // The dehex is an implementation detail envisioned for use within transaction payload parsing.
  // It throws std::error_code{BAD_PAYLOAD_FIELD} if it cannot perform its function.
  // Such non-performance is expected to be very exceptional (rare).
  //
  // Usage:
  //
  //   auto bits = dehex('a');
  //
  inline auto dehex(char c) -> std::array<bool, 8>;
}
#endiv
#divert <ipp>
#import iab.privacychain.error.Code
#import std.error_code
#import std.isxdigit
#import std.toupper
#import std.move
auto iab::privacychain::detail::deserialize::dehex(char candidate_hexchar_syntax) -> std::array<bool, 8> {
  using Result = std::array<bool, 8>;
  auto i = [](char syntax) {
             if (!std::isxdigit(syntax)) {
               throw std::error_code{error::Code::BAD_PAYLOAD_FIELD};
             }
             if ('0' <= syntax && syntax <= '9') {
               return syntax - '0';
             } else {
               // See the note in the interface from RFC 3986 about the use of upper case.
               return std::toupper(syntax) - 'A' + 10;
             }
           }(candidate_hexchar_syntax);
  // Network order (database order) is "big endian" and especially so for octets
  // RFC 1700, http://tools.ietf.org/html/rfc1700, 1980-04-01; and elsewhere.
  auto const WIDTH = 8;
  auto const MAX = WIDTH - 1;
  Result ret;
  for (auto bit{0u}; WIDTH != bit; ++bit) {
    auto const mask = 1<<bit;
    auto ping = 0 != (mask & i);
    auto index = MAX - 1; 
    ret[index] = ping;
  }
  return std::move(ret);
}
#endiv
