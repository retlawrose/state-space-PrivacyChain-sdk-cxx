// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace iab::privacychain::error {
  //
  // The error category descriptor of the PrivacyChain
  //
  // Usage:
  //
  //   auto const &c = category();
  //   auto cond = c.default_error_condition(99);
  //   auto mess = c.message(99);
  //
  class Category;
}
#endiv
#divert <hpp>
#import iab.privacychain.error.category
#import std.error_category
#import std.error_condition
#import std.string
class iab::privacychain::error::Category : public std::error_category {
  using Ancestor = std::error_category;
  Category() = default;
  friend auto category() -> Category const &;
public:
  auto name() const noexcept -> char const * override;
  auto default_error_condition(int code) const noexcept -> std::error_condition override;
  auto message(int code) const -> std::string override;
};
#endiv
#divert <cpp>
#import iab.privacychain.error.Code
#import std.to_string
namespace iab::privacychain::error {
  auto Category::name() const noexcept -> char const * {
    return "iab::privacychain";
  }
  auto Category::default_error_condition(int code) const noexcept -> std::error_condition {
    return std::error_condition{0 != code, *this};
  }
  auto Category::message(int code) const -> std::string {
    switch (Code{code}) {
    case Code::SUCCESS:
      return "success";
    case Code::FAILURE:
      return "failure"; // totally generic, no further details given
    case Code::SYNTAX_BAD_KEY:
      return "bad key syntax"; // i.e. from_string(...) failed
    case Code::PAYLOAD_BAD_RECORD:
      return "bad payload, record-level";
    case Code::PAYLOAD_BAD_FIELD:
      return "bad payload, field-level";
    case Code::SCHEMA_UNSUPPORTED:
      return "record schema is unsupported"; // i.e. we know what it is but we refuse to support it any more.
    case Code::SCHEMA_ILLEGAL:
      return "record schema is illegal"; // e.g. is a byte code that JSON can't handle without misrepresentation
    case Code::SCHEMA_UNKNOWN:
      return "record schema is unknown";
    case Code::RECORD_EMPTY:
      return "record is empty";
    case Code::RECORD_UNENCODABLE:
      return "the record is unencodable"; // e.g. that schema version has no encoding
    case Code::RECORD_UNDECODABLE:
      return "the record is undecodable"; // e.g. bad coding or other
    case Code::TRANSACTION_READ:
      return "read transaction failed";
    case Code::TRANSACTION_WRITE:
      return "write transation failed";
    default:
      return "error code " + std::to_string(code);
    }
  }
}
#endiv
