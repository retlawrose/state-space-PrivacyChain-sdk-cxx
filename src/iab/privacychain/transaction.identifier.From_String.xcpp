// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace iab::privacychain::transaction::identifier {
  //
  // The implementation (private) accessor for function function identifier:: from_string(...) 
  //
  // The function from_string will become part of the public interface of transaction::Identifier,
  // It may be "exported upwards" later.
  // howver, the master definition will be elaborated in the implemetation detail namepace.
  //
  // However,
  // The struct From_String is an implementation detail of from_string itself.
  // because function identifier: from_string(...) can't be a friend and also return Outcome<Identifier>
  //
  struct From_String;
}
#endiv
#divert <hpp>
#import iab.privacychain.transaction.Identifier
#import std.size_t
#import std.declval
struct iab::privacychain::transaction::identifier::From_String {
  inline explicit From_String(Identifier &ref) : ref{ref} { };
  using Size = std::size_t;
  using Value = Identifier::Ancestor::value_type; // old_school only
  using Reference = decltype(std::declval<Identifier>()[0]);
  using Const_Reference = decltype(std::declval<Identifier const>()[0]);
  inline auto operator[](Size i) -> Reference { return ref[i]; }
  inline auto operator[](Size i) const -> Const_Reference { return ref[i]; }
protected:
  Identifier &ref;
};
#endiv
