// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <hpp>
#import iab.privacychain.deserialize
#import std.string
namespace iab::privacychain {
  //
  // Deserialize the PrivacyChain payload blob
  // See deserialize<json::Value>(...) for elaborated usage.
  //
  // Schema-versioned record decoding occurs higher up.
  //
  // Specimen:
  //
  //   {"data": [
  //       {...etc... "collectData":PAYLOAD ...etc... },
  //       {...etc... "collectData":PAYLOAD ...etc... },
  //       {...etc... "collectData":PAYLOAD ...etc... },
  //       ...etc...
  //   }
  //
  template<> auto deserialize<std::string>(Outcome<Value>) -> Outcome<std::string>;
}
#endiv
#divert <cpp>
#import iab.privacychain.error.Code
#import std.error_code
template<> auto iab::privacychain::deserialize<std::string>(Outcome<Value> in) -> Outcome<std::string> {
  using Result = Outcome<std::string>;
  if (!ok(in)) {
    return Result{error_code(in)};
  }
  try {
    //
    // What is not checked here:
    // - the payload has record version signalling in the lead bytes.
    // - the payload may be otherwise shrouded (encrypted, etc.).
    //
    return Result{value(std::move(in)).asString()};
  } catch (std::error_code const &ec) {
    return Result{ec};
  }
}
#endiv
