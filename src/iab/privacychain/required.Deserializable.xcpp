// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <fpp>
#import iab.privacychain.traits.Is_Deserializable
#include <hpp/iab.privacychain.traits.Is_Deserializable> // need the complete type and all the specializations
namespace iab::privacychain::required {
  //
  // Is this TYPE a return type of deserializable(...)?
  //
  // The answer is delegated to a traits.
  //
  // Usage:
  //
  //   template<required::Deserializable RESULT> auto deserializable(...arguments...) -> RESULT;
  //
  template<typename TYPE> concept bool Deserializable = traits::Is_Deserializable<TYPE>::value;
}
#endiv
#divert <cpp>
// this is test code
namespace iab::privacychain {
  static_assert(required::Is_Deserializable<bool>);
  static_assert(required::Is_Deserializable<time::Point>);
  static_assert(required::Is_Deserializable<json::Value>);
  static_assert(required::Is_Deserializable<transaction::Identifier>);
}
#endiv
