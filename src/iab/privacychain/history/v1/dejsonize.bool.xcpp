// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <hpp>
#import iab.privacychain.history.v1.dejsonize
namespace iab::privacychain::history::v1 {
  //
  // Dejsonize the isDelete boolean blob
  // They seem to have chosen to use alpha as well as numeric representations.
  // See acxiom_cc.go v1.0
  //
  // Specimen:
  //
  //   {"data": [
  //       { ...etc... "isDelete":"false"},
  //       { ...etc... "isDelete":"true"},
  //       ...etc...
  //   }
  //
  template<> auto dejsonize<bool>(Outcome<json::Value>) -> Outcome<bool>;
}
#endiv
#divert <cpp>
#import iab.privacychain.error.Code
#import std.error_code
#import json.as
#import json.value.constants
#import json.exception.Generic
#import std.string_literals
template<> auto iab::privacychain::history::v1::dejsonize<bool>(Outcome<json::Value> in) -> Outcome<bool> try {
  if (!ok(in)) {
    return Outcome<bool>{error_code(in)};
  }
  //
  // [[FIXTHIS,ANSWERTHIS]] if the locale is set to non-English, will on-the-wire record transfers break?
  // The syntax *seems* to be among
  //
  //     boolean_literal ::= "true" | "false" | 1 | 0
  //
  // as formatted with the Go string conversion function FormatBool https://golang.org/pkg/strconv/
  // From acxiom_cc.go
  //
  //   buffer.WriteString(strconv.FormatBool(response.IsDelete))
  //
  auto const &object = value(in);
  if (object.isString()) {
    using namespace std::literals;
    auto syntax = object.asString(); // NOT as<string>(object)
    if ("true"s == syntax) {
      return Outcome<bool>{true};
    } else if ("false"s == syntax) {
      return Outcome<bool>{false};
    }
  } else if (object.isBool()) {
    return Outcome<bool>{object.asBool()};
  } else if (object.isNumeric()) {
    auto syntax = object.asLargestUInt();
    auto enbooleanated = 0 != syntax;
    return Outcome<bool>{enbooleanated};
  }
  // Good luck ... 
  // This will likely throw because JSON does not have a "bool" sense
  // ... and our guess around the syntax, above has failed to produce satisfaction.
  return Outcome<bool>{json::as<bool>(object)};
} catch (std::error_code const &ec) {
  return Outcome<bool>{ec};
} catch (json::exception::Generic const &) {
  return Outcome<bool>{std::error_code{error::Code::PAYLOAD_BAD_FIELD}};
#if 0 // WATCHOUT - module-json-devel 0.7 series has a different lineage for json::exception::Generic and Json::Exception
} catch (::Json::Exception const &) {
  return Outcome<bool>{std::error_code{error::Code::PAYLOAD_BAD_FIELD}};
#endif
}
#endiv
