// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <hpp>
#import iab.privacychain.history.v1.dejsonize
#import iab.privacychain.time.Point
namespace iab::privacychain::history::v1 {
  //
  // Dejsonize the isDelete boolean blob
  // They seem to have chosen to use alpha as well as numeric representations.
  // See acxiom_cc.go v1.0
  //
  // Specimen:
  //
  //   {"data": [
  //       { ...etc... "timestamp":"2019-03-06 01:35:00.166102034 +0000 UTC", ...etc... },
  //       { ...etc... "timestamp":"2019-03-06 01:35:39.630594093 +0000 UTC", ...etc... },
  //       ...etc...
  //   }
  //
  template<> auto dejsonize<time::Point>(Outcome<json::Value>) -> Outcome<time::Point>;
}
#endiv
#divert <cpp>
#import iab.privacychain.error.Code
#import json.exception.Generic
#import nonstd.uninitialized.zero
#import std.error_code
#import std.string_literals
#import sys.time.tm
#import sys.time.as
#import std.uintmax_t
#import std.chrono.duration
template<> auto iab::privacychain::history::v1::dejsonize<iab::privacychain::time::Point>(Outcome<json::Value> in) -> Outcome<time::Point> {
  using Result = Outcome<time::Point>;
  using namespace std::string_literals;
  if (!ok(in)) {
    return Result{error_code(in)};
  }
  try {
    // [[FIXTHIS]] use C++20's std::chrono::from_stream, BUT ALSO get those nanoseconds
    // [[FIXTHIS,ANSWERTHIS]] if the locale is set to non-English, will on-the-wire record transfers break?
    //
    // The time is formatted in the Go Language using the 2-argument Time constructor
    //   https://golang.org/pkg/time/#Unix
    // which has a printed representation according to the locale
    //   https://golang.org/pkg/time/#Time.String
    //
    // From acxiom_cc.go
    //
    //   buffer.WriteString(time.Unix(response.Timestamp.Seconds, int64(response.Timestamp.Nanos)).String())
    //
    std::uintmax_t yyyy, mm, dd, HH, MM, SS, nnnnnnnnn, oooo;
    char sign, utc[4];
    //                                            1   2   3   4   5   6   7   8 9   10    1      2    3    4    5    6    7           8      9      10
    auto scanned = sscanf(value(in).asCString(), "%ju-%ju-%ju %ju:%ju:%ju.%ju %c%ju %3c", &yyyy, &mm, &dd, &HH, &MM, &SS, &nnnnnnnnn, &sign, &oooo, &utc[0]);
    if (10 == scanned) {
      utc[3] = '\0'; // WATCHOUT -- sscanf will not do this for you on %3c
      if (1970 <= yyyy && yyyy <= 2525) {
        if (1 <= mm && mm <= 12) {
          if (1 <= dd && dd <= 31) {
            if (0 <= HH && HH <= 24) { // leap seconds?
              if (0 <= MM && MM <= 60) { // leap seconds?
                if (0 <= SS && SS <= 60) { // leap seconds? ... indeed there is 23:59:60 on a leap second
                  if (0 <= nnnnnnnnn && nnnnnnnnn <= 1'000'000'000) {
                    if (0 == oooo) {
                      if ("UTC"s == utc) {
                        sys::time::tm tmb;
                        nonstd::uninitialized::zero(tmb);
                        tmb.tm_year = yyyy - 1900;
                        tmb.tm_mon = mm - 1;
                        tmb.tm_mday = dd;
                        tmb.tm_hour = HH;
                        tmb.tm_min = MM;
                        tmb.tm_sec = SS;
                        // WATCHOUT - we need this to compute the time in UTC
                        //            we CANNOT have this computing the time point "as if" localtime
                        auto seconds = sys::time::as<time::Point>(tmb);
                        auto nanoseconds = std::chrono::nanoseconds(nnnnnnnnn);
                        return Result{seconds + nanoseconds};
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return Result{std::error_code{error::Code::PAYLOAD_BAD_FIELD}};
  } catch (std::error_code const &ec) {
    return Result{ec};
  } catch (json::exception::Generic const &) {
    return Result{std::error_code{error::Code::PAYLOAD_BAD_FIELD}};
#if 0 // WATCHOUT - module-json-devel 0.7 series has a different lineage for json::exception::Generic and Json::Exception
  } catch (::Json::Exception const &) {
    return Result{std::error_code{error::Code::PAYLOAD_BAD_FIELD}};
#endif
  }
}
#endiv
