// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <fpp>
#import iab.privacychain.error.Condition
namespace iab::privacychain::error {
  //
  // The (detailed) error codes
  //
  // Supporting
  //   Zero-Overhead Determinsitic ExceptionsL Throwing values
  //   http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0709r0.pdf
  // And the design of https://en.cppreference.com/w/cpp/error/error_code
  //
  // Recall the invariances provided by Category::default_error_condition(...) being at least:
  //
  //    Condition::SUCCESS == std::error_code{Code::SUCCESS};
  //    Condition::FAILURE == std::error_code{Code::PAYLOAD_BAD_RECORD};
  //    ...and so forth...
  //
  enum class Code
    { SUCCESS = (int) Condition::SUCCESS,
      FAILURE = (int) Condition::FAILURE,
      SYNTAX_BAD_KEY, // i.e. key::from_string(...) failed
      PAYLOAD_BAD_RECORD,
      PAYLOAD_BAD_FIELD,
      SCHEMA_UNSUPPORTED,
      SCHEMA_IS_UNSUPPORTED [[deprecated("instead use SCHEMA_UNSUPPORTED")]] = SCHEMA_UNSUPPORTED,
      SCHEMA_ILLEGAL,
      SCHEMA_UNKNOWN,
      SCHEMA_IS_UNKNOWN [[deprecated("instead use SCHEMA_UNKNOWN")]] = SCHEMA_UNKNOWN,
      RECORD_EMPTY,
      RECORD_IS_EMPTY [[deprecated("instead use RECORD_EMPTY")]] = RECORD_EMPTY,
      RECORD_UNENCODABLE,
      RECORD_UNDECODABLE,
      TRANSACTION_READ,
      TRANSACTION_WRITE };
}
#import std.is_error_code_enum
namespace std {
  template<> struct is_error_code_enum<iab::privacychain::error::Code>;
}
#endiv
#divert <hpp>
#import std.true_type
template<> struct std::is_error_code_enum<iab::privacychain::error::Code> : public std::true_type { };
#import std.error_code
namespace iab::privacychain::error {
  inline auto make_error_code(Code) -> std::error_code;
}
#endiv
#divert <ipp>
#import iab.privacychain.error.category
auto iab::privacychain::error::make_error_code(Code code) -> std::error_code {
  return std::error_code{(int) code, category()};
}
#endiv
