// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::key { class Generate; }
#endiv
#divert <hpp>
struct tests::unit::key::Generate : public cppunit::test::Fixture {
  template<typename TYPE> auto test_generate() -> void;
  static auto suite() -> cppunit::Test *;
};
#import std.string
#import std.set
namespace tests::unit::key {
  template<> auto Generate::test_generate<std::string>() -> void;
  template<> auto Generate::test_generate<std::set<char>>() -> void;
  template<> auto Generate::test_generate<std::set<char>::iterator>() -> void;
}
#endiv
#divert <tpp>
#import std.string_literals
using namespace std::string_literals;
#import iab.privacychain.key.Key
#import iab.privacychain.key.generate
#import std.uint8_t
#import std.uint16_t
#import std.uint32_t
#import std.uint64_t
#import nonstd.uint128_t
template<typename TYPE> auto tests::unit::key::Generate::test_generate() -> void {
  using namespace ::iab::privacychain::key;
  using namespace std;
  auto const zero = Key{};
  auto g = generate(TYPE(0));
  CPPUNIT_ASSERT(zero == g); // <--------- no bits ... and you get no fingerprint
  auto const arbitrary = Key{0x0'd842'11c3'9122'442elu};
  auto h = generate(TYPE(arbitrary)); // <-------- narrowing and truncation will occur
  CPPUNIT_ASSERT(zero != h);
  CPPUNIT_ASSERT(arbitrary != h); // <--------- some bits ... and you get a fingerprint
}
#endiv
#divert <cpp>
template<> auto tests::unit::key::Generate::test_generate<std::string>() -> void {
  using namespace ::iab::privacychain::key;
  using namespace std;
  auto const zero = Key{};
  auto const specimen = std::string{"Chill pill, with Bill!"};
  auto g = generate(specimen);
  CPPUNIT_ASSERT(zero != g);
}
template<> auto tests::unit::key::Generate::test_generate<std::set<char>>() -> void {
  using namespace ::iab::privacychain::key;
  using namespace std;
  auto const zero = Key{};
  auto const specimen = std::set<char>{'C','h','i','l','l',' ','p','i','l','l',',',' ','w','i','t','h',' ','B','i','l','l','!'};
  auto g = generate(specimen);
  CPPUNIT_ASSERT(zero != g);
}
template<> auto tests::unit::key::Generate::test_generate<std::set<char>::iterator>() -> void {
  using namespace ::iab::privacychain::key;
  using namespace std;
  auto const zero = Key{};
  auto const specimen = std::set<char>{'C','h','i','l','l',' ','p','i','l','l',',',' ','w','i','t','h',' ','B','i','l','l','!'};
  auto giterator = generate(specimen.begin(), specimen.end());
  CPPUNIT_ASSERT(zero != giterator);
}
auto tests::unit::key::Generate::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"generate"};
  series << call("uint8_t", &Generate::test_generate<std::uint8_t>)
         << call("uint16_t", &Generate::test_generate<std::uint16_t>)
         << call("uint32_t", &Generate::test_generate<std::uint32_t>)
         << call("uint64_t", &Generate::test_generate<std::uint64_t>)
         << call("uint128_t", &Generate::test_generate<nonstd::uint128_t>)
         << call("string", &Generate::test_generate<std::string>)
         << call("set", &Generate::test_generate<std::set<char>>)
         << call("iterator", &Generate::test_generate<std::set<char>::iterator>)
    ;
  return finalize(series);
}
#endiv
