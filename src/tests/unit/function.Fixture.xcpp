// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::function { class Fixture; }
#endiv
#divert <hpp>
#import iab.privacychain.Function
struct tests::unit::function::Fixture : public cppunit::test::Fixture {
  using Subject = ::iab::privacychain::Function;
  auto test_constructor() -> void;
  auto test_operator_eq() -> void;
  auto test_to_string() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.string_literals
using namespace std::string_literals;
auto tests::unit::function::Fixture::test_constructor() -> void {
  auto s0 = Subject{}; // <-------- test this
  auto s1 = Subject{"1"}; // <------ and this
  CPPUNIT_ASSERT(s0 != s1);
}
auto tests::unit::function::Fixture::test_operator_eq() -> void {
  auto s0 = Subject{};
  auto s1 = Subject{"1"};
  CPPUNIT_ASSERT(s0 != s1); // <--------- test this
}
auto tests::unit::function::Fixture::test_to_string() -> void {
  auto sub1 = Subject{"1"};
  auto str1 = std::string{"1"};
  auto const expected = str1;
  auto const actual = to_string(sub1);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::function::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"function"};
  series << call("constructor", &Fixture::test_constructor)
         << call("operator_eq", &Fixture::test_operator_eq)
         << call("to_string", &Fixture::test_to_string)
    ;
  return finalize(series);
}
#endiv
