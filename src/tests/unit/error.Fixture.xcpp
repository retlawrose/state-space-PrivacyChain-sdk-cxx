// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::error { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::error::Fixture : public cppunit::test::Fixture {
public:
  auto test_Condition() -> void;
  auto test_Code() -> void;
  auto test_Category() -> void;
  auto test_category() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import iab.privacychain.error.Condition
#import std.error_condition
auto tests::unit::error::Fixture::test_Condition() -> void {
  using namespace ::iab::privacychain::error;
  CPPUNIT_ASSERT(Condition::SUCCESS != Condition::FAILURE);
  auto const success = std::error_condition{Condition::SUCCESS}; // calls make_error_condition(...)
  auto const failure = std::error_condition{Condition::FAILURE};
  CPPUNIT_ASSERT(success != failure);
}
#import iab.privacychain.error.Code
#import std.error_code
auto tests::unit::error::Fixture::test_Code() -> void {
  using namespace ::iab::privacychain::error;
  CPPUNIT_ASSERT(Code::SUCCESS != Code::FAILURE);
  auto const success = std::error_code{Code::SUCCESS}; // calls make_error_code(...)
  auto const failure = std::error_code{Code::FAILURE};
  CPPUNIT_ASSERT(success != failure);
}
#import iab.privacychain.error.Category
#import std.empty
auto tests::unit::error::Fixture::test_Category() -> void {
  using namespace ::iab::privacychain::error;
  auto const &c = category();
  CPPUNIT_ASSERT(nullptr != c.name());
  CPPUNIT_ASSERT(std::error_condition{Condition::FAILURE} == c.default_error_condition(99));
  CPPUNIT_ASSERT(! std::empty(c.message(-1)));
}
#import iab.privacychain.error.category
auto tests::unit::error::Fixture::test_category() -> void {
  using namespace ::iab::privacychain::error;
  auto const &c = category();
  CPPUNIT_ASSERT(nullptr != c.name());
  CPPUNIT_ASSERT(true);
}
#import tests.unit.error.Category
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::error::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("error");
  series << call("Condition", &Fixture::test_Condition)
         << call("Code", &Fixture::test_Code)
         << call("Category", &Fixture::test_Category)
         << call("category", &Fixture::test_category)
         << add(Category::suite())
    ;
  return series.release();
}
#endiv
