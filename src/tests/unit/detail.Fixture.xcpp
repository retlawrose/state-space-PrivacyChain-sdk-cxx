// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::detail { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::detail::Fixture : public cppunit::test::Fixture {
  auto test_debyte_01() -> void;
  auto test_debyte_02() -> void;
  auto test_dehex_01() -> void;
  auto test_dehex_02() -> void;
  static auto suite() -> cppunit::Test *;
private:
  template<typename CONTAINER> static auto assert_equal(CONTAINER &, CONTAINER &) -> void;
};
#endiv
#divert <tpp>
template<typename CONTAINER> auto tests::unit::detail::Fixture::assert_equal(CONTAINER &a, CONTAINER &b) -> void {
  CPPUNIT_ASSERT(std::equal(a.begin(), a.end(), b.begin(), b.end()));
}
#endiv
#divert <cpp>
#import iab.privacychain.detail.debyte
auto tests::unit::detail::Fixture::test_debyte_01() -> void {
  using ::iab::privacychain::detail::debyte;
  {
    auto const actual = debyte('\x00');
    auto const expected = std::array<bool,8>{0,0,0,0,0,0,0,0};
    assert_equal(expected, actual);
  } {
    auto const actual = debyte('\xff');
    auto const expected = std::array<bool,8>{1,1,1,1,1,1,1,1};
    assert_equal(expected, actual);
  }
}
auto tests::unit::detail::Fixture::test_debyte_02() -> void {
  using ::iab::privacychain::detail::debyte;
  {
    auto const actual = debyte('\x0f');
    auto const expected = std::array<bool,8>{1,1,1,1,0,0,0,0};
    assert_equal(expected, actual);
  } {
    auto const actual = debyte('\xf0');
    auto const expected = std::array<bool,8>{0,0,0,0,1,1,1,1};
    assert_equal(expected, actual);
  }
}
#import iab.privacychain.detail.dehex
auto tests::unit::detail::Fixture::test_dehex_01() -> void {
  using ::iab::privacychain::detail::dehex;
  {
    auto const actual = dehex('0');
    auto const expected = std::array<bool,4>{0,0,0,0};
    assert_equal(expected, actual);
  } {
    auto const actual = dehex('1');
    auto const expected = std::array<bool,4>{1,0,0,0};
    assert_equal(expected, actual);
  } {
    auto const actual = dehex('2');
    auto const expected = std::array<bool,4>{0,1,0,0};
    assert_equal(expected, actual);
  }
}
auto tests::unit::detail::Fixture::test_dehex_02() -> void {
  using ::iab::privacychain::detail::dehex;
  {
    auto const actual = dehex('8');
    auto const expected = std::array<bool,4>{0,0,0,1};
    assert_equal(expected, actual);
  } {
    auto const actual = dehex('a');
    auto const expected = std::array<bool,4>{0,1,0,1};
    assert_equal(expected, actual);
  } {
    auto const actual = dehex('B');
    auto const expected = std::array<bool,4>{1,1,0,1};
    assert_equal(expected, actual);
  }
}
auto tests::unit::detail::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"detail"};
  series << []{
              auto deb = Stream{"debyte"};
              deb << call("01", &Fixture::test_debyte_01)
                  << call("02", &Fixture::test_debyte_02)
                  << END;
              return move(deb);
            }()
         << []{
              auto dex = Stream{"dehex"};
              dex << call("01", &Fixture::test_dehex_01)
                  << call("02", &Fixture::test_dehex_02)
                  << END;
              return move(dex);
            }()
         << END;
  return finalize(series);
}
#endiv
