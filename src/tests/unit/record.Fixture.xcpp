// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::record { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.test.Fixture
#import iab.privacychain.Record
struct tests::unit::record::Fixture : public cppunit::test::Fixture {
  using Subject = ::iab::privacychain::Record;
  auto test_none() -> void;
  auto test_bytes() -> void;
  auto test_json() -> void;
  auto test_tcf_v1() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
auto tests::unit::record::Fixture::test_none() -> void {
  Subject none; 
  none = std::move(none);
  CPPUNIT_ASSERT(true);
}
#import std.move
#import std.vector
#import std.byte
auto tests::unit::record::Fixture::test_bytes() -> void {
  namespace record = ::iab::privacychain::record;
  auto specimen = record::Bytes{};
  Subject subject{std::move(specimen)};
  subject = std::move(subject);
  CPPUNIT_ASSERT(true);
}
#import json.Value
auto tests::unit::record::Fixture::test_json() -> void {
  namespace record = ::iab::privacychain::record;
  auto specimen = record::Json{};
  Subject subject{std::move(specimen)};
  subject = std::move(subject);
  CPPUNIT_ASSERT(true);
}
#import iab.privacychain.record.tcf.Version1
auto tests::unit::record::Fixture::test_tcf_v1() -> void {
  namespace record = ::iab::privacychain::record;
  auto specimen = record::tcf::Version1{};
  Subject subject{std::move(specimen)};
  subject = std::move(subject);
  CPPUNIT_ASSERT(true);
}
auto tests::unit::record::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"record"};
  series << call("none", &Fixture::test_none)
         << call("bytes", &Fixture::test_bytes)
         << call("json", &Fixture::test_json)
         << call("tcf.v1", &Fixture::test_tcf_v1)
    ;
  return finalize(series);
}
#endiv
