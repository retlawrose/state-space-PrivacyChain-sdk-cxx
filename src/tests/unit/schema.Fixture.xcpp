// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::schema { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::schema::Fixture : public cppunit::test::Fixture {
  auto test_header_v1() -> void;
  auto test_header_v2() -> void;
  auto test_header_v3() -> void;
  auto test_inspect_v0() -> void;
  auto test_inspect_v1() -> void;
  auto test_inspect_v2() -> void;
  auto test_inspect_v3() -> void;
  auto test_inspect_bra() -> void;
  auto test_inspect_qq() -> void;
  auto test_inspect_q() -> void;
  auto test_inspect_others() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.string
#import std.string_literals
using namespace std::string_literals;
#import iab.privacychain.schema
auto tests::unit::schema::Fixture::test_header_v1() -> void {
  namespace sc = ::iab::privacychain::schema;
  auto he = sc::header(sc::Version::V1);
  CPPUNIT_ASSERT(1 == he.size());
  CPPUNIT_ASSERT_EQUAL((char)sc::magic::M1, he.front());
}
auto tests::unit::schema::Fixture::test_header_v2() -> void {
  namespace sc = ::iab::privacychain::schema;
  auto he = sc::header(sc::Version::V2);
  CPPUNIT_ASSERT(1 == he.size());
  CPPUNIT_ASSERT_EQUAL((char)sc::magic::M2, he.front());
}
auto tests::unit::schema::Fixture::test_header_v3() -> void {
  namespace sc = ::iab::privacychain::schema;
  auto he = sc::header(sc::Version::V3);
  CPPUNIT_ASSERT(1 == he.size());
  CPPUNIT_ASSERT_EQUAL((char)sc::magic::M3, he.front());
}
#import std.byte
#import std.vector
auto tests::unit::schema::Fixture::test_inspect_v0() -> void {
  namespace sc = ::iab::privacychain::schema;
  std::vector<std::byte> bytes{std::byte{0}, std::byte{'A'}, std::byte{'B'}, std::byte{'C'}};
  CPPUNIT_ASSERT(4 == bytes.size());
  auto inspected = sc::inspect(bytes); // <-------- test this
  CPPUNIT_ASSERT(!ok(inspected));
}
auto tests::unit::schema::Fixture::test_inspect_v1() -> void {
  namespace sc = ::iab::privacychain::schema;
  std::vector<std::byte> bytes{std::byte{'a'}, std::byte{'A'}, std::byte{'B'}, std::byte{'C'}};
  CPPUNIT_ASSERT(4 == bytes.size());
  auto inspected = sc::inspect(bytes); // <-------- test this
  CPPUNIT_ASSERT(ok(inspected));
  CPPUNIT_ASSERT(sc::Version::V1 == value(inspected));
}
auto tests::unit::schema::Fixture::test_inspect_v2() -> void {
  namespace sc = ::iab::privacychain::schema;
  std::vector<std::byte> bytes{std::byte{'b'}, std::byte{'A'}, std::byte{'B'}, std::byte{'C'}};
  CPPUNIT_ASSERT(4 == bytes.size());
  auto inspected = sc::inspect(bytes); // <-------- test this
  CPPUNIT_ASSERT(ok(inspected));
  CPPUNIT_ASSERT(sc::Version::V2 == value(inspected));
}
auto tests::unit::schema::Fixture::test_inspect_v3() -> void {
  namespace sc = ::iab::privacychain::schema;
  std::vector<std::byte> bytes{std::byte{'c'}, std::byte{'A'}, std::byte{'B'}, std::byte{'C'}};
  CPPUNIT_ASSERT(4 == bytes.size());
  auto inspected = sc::inspect(bytes); // <-------- test this
  CPPUNIT_ASSERT(ok(inspected));
  CPPUNIT_ASSERT(sc::Version::V3 == value(inspected));
}
auto tests::unit::schema::Fixture::test_inspect_bra() -> void {
  namespace sc = ::iab::privacychain::schema;
  std::vector<std::byte> bytes{std::byte{'{'}, std::byte{'A'}, std::byte{':'}, std::byte{'1'}};
  CPPUNIT_ASSERT(4 == bytes.size());
  auto inspected = sc::inspect(bytes); // <-------- test this
  CPPUNIT_ASSERT(ok(inspected));
  CPPUNIT_ASSERT(sc::Version::HISTORY0 == value(inspected));
}
auto tests::unit::schema::Fixture::test_inspect_qq() -> void {
  namespace sc = ::iab::privacychain::schema;
  std::vector<std::byte> bytes{std::byte{'"'}, std::byte{'A'}, std::byte{'B'}, std::byte{'C'}};
  CPPUNIT_ASSERT(4 == bytes.size());
  auto inspected = sc::inspect(bytes); // <-------- test this
  CPPUNIT_ASSERT(!ok(inspected));
}
auto tests::unit::schema::Fixture::test_inspect_q() -> void {
  namespace sc = ::iab::privacychain::schema;
  std::vector<std::byte> bytes{std::byte{'\''}, std::byte{'A'}, std::byte{'B'}, std::byte{'C'}};
  CPPUNIT_ASSERT(4 == bytes.size());
  auto inspected = sc::inspect(bytes); // <-------- test this
  CPPUNIT_ASSERT(!ok(inspected));
}
auto tests::unit::schema::Fixture::test_inspect_others() -> void {
  namespace sc = ::iab::privacychain::schema;
  for (auto i{0u}, e{256u}; e != i; ++i) {
    auto other = std::byte(i);
    std::vector<std::byte> bytes{other, std::byte{'A'}, std::byte{'B'}, std::byte{'C'}};
    CPPUNIT_ASSERT(4 == bytes.size());
    auto inspected = sc::inspect(bytes); // <-------- test this
    CPPUNIT_ASSERT(ok(inspected) || !ok(inspected)); // no exceptions, no segfaults
  }
}
auto tests::unit::schema::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"schema"};
  series << []{
              auto hea = Stream{"header"};
              hea << call("v1", &Fixture::test_header_v1)
                  << call("v2", &Fixture::test_header_v2)
                  << call("v3", &Fixture::test_header_v3)
                  << END;
              return move(hea);
            }()
         << []{
              auto ins = Stream{"inspect"};
              ins << call("v0", &Fixture::test_inspect_v0)
                  << call("v1", &Fixture::test_inspect_v1)
                  << call("v2", &Fixture::test_inspect_v2)
                  << call("v3", &Fixture::test_inspect_v3)
                  << call("bra", &Fixture::test_inspect_bra)
                  << call("qq", &Fixture::test_inspect_qq)
                  << call("q", &Fixture::test_inspect_q)
                  << call("others", &Fixture::test_inspect_others)
                  << END;
              return move(ins);
            }()
         << END;
  return finalize(series);
}
#endiv
