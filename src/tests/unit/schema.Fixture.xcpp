// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <fpp>
namespace tests::unit::schema { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::schema::Fixture : public cppunit::test::Fixture {
public:
  auto test_something() -> void;
  auto test_header_v1() -> void;
  auto test_header_v2() -> void;
  auto test_inspect_v0() -> void;
  auto test_inspect_v1() -> void;
  auto test_inspect_v2() -> void;
  auto test_inspect_qq() -> void;
  auto test_inspect_q() -> void;
  auto test_inspect_others() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.string
#import std.string_literals
using namespace std::string_literals;
#import iab.privacychain.schema
auto tests::unit::schema::Fixture::test_something() -> void {
  CPPUNIT_ASSERT(true);
}
#if 0
#import iab.privacychain.schema
auto tests::unit::schema::Fixture::test_header_v1() -> void {
  namespace sc = ::iab::privacychain::schema;
  auto he = sc::header(sc::V1);
  CPPUNIT_ASSERT(1 == he.size());
}
auto tests::unit::schema::Fixture::test_header_v2() -> void {
  namespace sc = ::iab::privacychain::schema;
  auto he = sc::header(sc::V2);
  CPPUNIT_ASSERT(1 == he.size());
}
#import std.byte
#import std.vector
auto tests::unit::schema::Fixture::test_inspect_v0() -> void {
  namespace sc = ::iab::privacychain::schema;
  std::vector<std::byte> bytes{std:byte{0}, std:byte{'a'}, std:byte{'b'}, std:byte{'c'}};
  CPPUNIT_ASSERT(4 == bytes.size());
  auto inspected = sc::inspect(bytes);
  CPPUNIT_ASSERT(!ok(inspected));
}
auto tests::unit::schema::Fixture::test_inspect_v1() -> void {
  namespace sc = ::iab::privacychain::schema;
  std::vector<std::byte> bytes{std:byte{1}, std:byte{'a'}, std:byte{'b'}, std:byte{'c'}};
  CPPUNIT_ASSERT(4 == bytes.size());
  auto inspected = sc::inspect(bytes);
  CPPUNIT_ASSERT(ok(inspected));
}
auto tests::unit::schema::Fixture::test_inspect_v2() -> void {
  namespace sc = ::iab::privacychain::schema;
  std::vector<std::byte> bytes{std:byte{2}, std:byte{'a'}, std:byte{'b'}, std:byte{'c'}};
  CPPUNIT_ASSERT(4 == bytes.size());
  auto inspected = sc::inspect(bytes);
  CPPUNIT_ASSERT(ok(inspected));
}
auto tests::unit::schema::Fixture::test_inspect_qq() -> void {
  namespace sc = ::iab::privacychain::schema;
  std::vector<std::byte> bytes{std:byte{'"'}, std:byte{'a'}, std:byte{'b'}, std:byte{'c'}};
  CPPUNIT_ASSERT(4 == bytes.size());
  auto inspected = sc::inspect(bytes);
  CPPUNIT_ASSERT(!ok(inspected));
}
auto tests::unit::schema::Fixture::test_inspect_q() -> void {
  namespace sc = ::iab::privacychain::schema;
  std::vector<std::byte> bytes{std:byte{'\''}, std:byte{'a'}, std:byte{'b'}, std:byte{'c'}};
  CPPUNIT_ASSERT(4 == bytes.size());
  auto inspected = sc::inspect(bytes);
  CPPUNIT_ASSERT(!ok(inspected));
}
auto tests::unit::schema::Fixture::test_inspect_others() -> void {
  namespace sc = ::iab::privacychain::schema;
  for (int i{0}, e{256}; e != i; ++i) {
    auto other std::byte{b};
    std::vector<std::byte> bytes{other, std:byte{'a'}, std:byte{'b'}, std:byte{'c'}};
    CPPUNIT_ASSERT(4 == bytes.size());
    auto inspected = sch::inspect(bytes);
    CPPUNIT_ASSERT(ok(inspected) || !ok(inspected));
  }
}
#endif
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::schema::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("schema");
#if 0
  {
    Stream hea("header");
    hea << call("v1", &Fixture::test_header_v1)
        << call("v2", &Fixture::test_header_v2)
      ;
    series << move(hea.release());
  } {
    Stream ins("inspect");
    ins << call("v0", &Fixture::test_inspect_v0)
        << call("v1", &Fixture::test_inspect_v1)
        << call("v2", &Fixture::test_inspect_v2)
        << call("v3", &Fixture::test_inspect_v3)
        << call("qq", &Fixture::test_inspect_qq)
        << call("q", &Fixture::test_inspect_q)
        << call("others", &Fixture::test_inspect_others)
      ;
    series << move(inspect.release());
  }
#endif
  series << call("something", &Fixture::test_something)
    ;
  return series.release();
}
#endiv
