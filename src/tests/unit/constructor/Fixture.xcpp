// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::constructor { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::constructor::Fixture : public cppunit::test::Fixture {
  enum class Function { INIT, GET, SET, HISTORY };
  enum Uniqueness : int;
  struct dispatch { 
    struct Basis; 
    struct Generator;
  };
  template<Function, Uniqueness> struct Dispatch;
  template<Function, Uniqueness> auto test_generate() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <tpp>
#import tests.unit.constructor.Fixture.dispatch.Basis
#import tests.unit.constructor.Fixture.Dispatch
namespace tests::unit::constructor {
  template<Fixture::Function AC, Fixture::Uniqueness UU> auto Fixture::test_generate() -> void {
    Dispatch<AC, UU> d;
    d.test_generate();
  }
}
#endiv
#divert <cpp>
#import tests.unit.constructor.Arguments
auto tests::unit::constructor::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"constructor"};
  series << []{
              auto ini = Stream{"init"};
              ini << call("init", &Fixture::test_generate<Function::INIT, Uniqueness{1}>)
                  << END;
              return move(ini);
            }()
         << []{
            auto get = Stream{"get"};
            get << call("get1", &Fixture::test_generate<Function::GET, Uniqueness{1}>)
                << call("get2", &Fixture::test_generate<Function::GET, Uniqueness{2}>)
                << call("get3", &Fixture::test_generate<Function::GET, Uniqueness{3}>)
                << END;
            return move(get);
          }()
       << []{
            auto set = Stream{"set"};
            set << call("set1", &Fixture::test_generate<Function::SET, Uniqueness{1}>)
                << call("set2", &Fixture::test_generate<Function::SET, Uniqueness{2}>)
                << call("set3", &Fixture::test_generate<Function::SET, Uniqueness{3}>)
                << END;
            return move(set);
          }()
       << []{
            auto his = Stream{"history"};
            // These are somewhat redundant because the history constructor is shaped just like the "get" constructor
            his << call("history1", &Fixture::test_generate<Function::HISTORY, Uniqueness{1}>)
                << call("history2", &Fixture::test_generate<Function::HISTORY, Uniqueness{2}>)
                << call("history3", &Fixture::test_generate<Function::HISTORY, Uniqueness{3}>)
                << END;
            return move(his);
          }()
       << add<Arguments>()
       << END;
  return finalize(series);
}
#endiv
