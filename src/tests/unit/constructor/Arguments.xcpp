// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
#import iab.privacychain.record
namespace tests::unit::constructor {
  namespace [[eponymous]] arguments {
    class Arguments;
    namespace record = ::iab::privacychain::record;
  }
  using arguments::Arguments;
}
#endiv
#divert <hpp>
#import iab.privacychain.constructor.Arguments
struct tests::unit::constructor::arguments::Arguments : public cppunit::test::Fixture {
  using Subject = library::Arguments;
  auto test_constructor() -> void;
  auto test_string_count() -> void;
  template<typename TYPE> auto test_stringify() -> void;
  template<typename TYPE> auto test_append() -> void;
  template<typename TYPE> auto test_stringify_record() -> void;
  template<typename TYPE> auto test_append_record() -> void;
  static auto suite() -> cppunit::Test *;
  template<typename TYPE> struct Palette;
};
#import iab.privacychain.Record // e.g. record::Bytes
namespace tests::unit::constructor::arguments {
  template<> struct Arguments::Palette<record::Bytes>;
}
namespace tests::unit::constructor::arguments {
  template<> auto Arguments::test_stringify_record<record::Bytes>() -> void;
  template<> auto Arguments::test_stringify_record<record::Json>() -> void;
  template<> auto Arguments::test_stringify_record<record::tcf::Version1>() -> void;
  //
  template<> auto Arguments::test_append_record<record::Bytes>() -> void;
  template<> auto Arguments::test_append_record<record::Json>() -> void;
  template<> auto Arguments::test_append_record<record::tcf::Version1>() -> void;
}
#endiv
#divert <tpp>
#import tests.unit.constructor.Arguments.Palette
#import std.cerr
#import std.ostringstream
#import std.type_info
template<typename TYPE> auto tests::unit::constructor::arguments::Arguments::test_stringify() -> void {
  Palette<TYPE> palette;
  std::ostringstream buf;
  buf << typeid(TYPE).name()
      << ' ' << Subject::stringify(palette.zero) // <----- test this
      << ' ' << Subject::stringify(palette.one) // <------ and so on
      << ' ' << Subject::stringify(palette.two)
      << ' ' << Subject::stringify(palette.a)
      << ' ' << Subject::stringify(palette.b)
      << ' ' << Subject::stringify(palette.c)
      << '\n';
  std::cerr << buf.str();
}
#import json.Value
#import json.value.constants
template<typename TYPE> auto tests::unit::constructor::arguments::Arguments::test_append() -> void {
  Palette<TYPE> palette;
  json::Value array{json::value::ARRAY};
  Subject subject{array};
  subject.append(palette.zero); // <----- test this
  subject.append(palette.one); // <------ and so on
  subject.append(palette.two);
  subject.append(palette.a);
  subject.append(palette.b);
  subject.append(palette.c);
  { std::ostringstream buf;
    buf << typeid(TYPE).name() << ' ' << array << '\n';
    std::cerr << buf.str(); }
}
#endiv
#divert <cpp>
auto tests::unit::constructor::arguments::Arguments::test_constructor() -> void {
  json::Value array{json::value::ARRAY};
  Subject subject{array}; // <------------- test this (whoop! there it is!)
  CPPUNIT_ASSERT(true);
}
auto tests::unit::constructor::arguments::Arguments::test_string_count() -> void {
  { auto specimen = std::string(1, 'b'); // <---------- PARENTHESIS gives string(count, char)
    CPPUNIT_ASSERT(1 == specimen.size());
    CPPUNIT_ASSERT('b' == specimen.front()); }
  { auto specimen = std::string{1, 'b'}; // <---------- BRACKETS gives string{initializer_list<char>}
    CPPUNIT_ASSERT(2 == specimen.size());
    CPPUNIT_ASSERT('\001' == specimen.front());
    CPPUNIT_ASSERT('b' == specimen.back()); }
}
namespace tests::unit::constructor::arguments {
  template<> auto Arguments::test_stringify_record<record::Bytes>() -> void {
    using Value = record::Bytes;
    Palette<Value> palette;
    json::Value array{json::value::ARRAY};
    Subject subject{array};
    ::iab::privacychain::Record specimen{palette.single};
    std::ostringstream buf;
    buf << typeid(Value).name() << ' ' << Subject::stringify(specimen) << '\n'; // <----------------- test this
    std::cerr << buf.str();
  }
  template<> auto Arguments::test_stringify_record<record::Json>() -> void {
#warning WRITETEHIS auto Arguments::test_stringify_record<record::Json>() -> void
    CPPUNIT_ASSERT(true);
  }
  template<> auto Arguments::test_stringify_record<record::tcf::Version1>() -> void {
#warning WRITETEHIS auto Arguments::test_stringify_record<record::tcf::Version1>() -> void
    CPPUNIT_ASSERT(true);
  }
  template<> auto Arguments::test_append_record<record::Bytes>() -> void {
    using Value = record::Bytes;
    Palette<Value> palette;
    json::Value array{json::value::ARRAY};
    Subject subject{array};
    subject.append(palette.single); // <------------------------- test this
    { std::ostringstream buf;
      buf << typeid(Value).name() << ' ' << array << '\n';
      std::cerr << buf.str(); }
  }
  template<> auto Arguments::test_append_record<record::Json>() -> void {
#warning WRITETEHIS auto Arguments::test_append_record<record::Json>() -> void
    CPPUNIT_ASSERT(true);
  }
  template<> auto Arguments::test_append_record<record::tcf::Version1>() -> void {
#warning WRITETEHIS auto Arguments::test_append_record<record::tcf::Version1>() -> void
    CPPUNIT_ASSERT(true);
  }
}
auto tests::unit::constructor::arguments::Arguments::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"Arguments"};
  series << call("constructor", &Arguments::test_constructor)
         << call("string-count", &Arguments::test_string_count)
         << []{
              auto str = Stream{"stringify"};
              // The pantheon here OUGHT to be a superset of the specializations in Arguments.xcpp
              str << call("char", &Arguments::test_stringify<char>)
                  << call("byte", &Arguments::test_stringify<std::byte>)
                  << call("int", &Arguments::test_stringify<int>)
                  << call("char const *", &Arguments::test_stringify<char const *>)
                  << call("string", &Arguments::test_stringify<std::string>)
                  << call("string_view", &Arguments::test_stringify<std::string_view>)
                  << []{
                       auto rec = Stream{"Record"};
                       rec << call("bytes", &Arguments::test_stringify_record<record::Bytes>)
                           << call("json", &Arguments::test_stringify_record<record::Json>)
                           << call("tcf", &Arguments::test_stringify_record<record::tcf::Version1>)
                           << END;
                       return move(rec);
                     }()
                  << END;
                return move(str);
            }()
         << []{
              auto app = Stream{"append"};
              app << call("char", &Arguments::test_append<char>)
                  << call("byte", &Arguments::test_append<std::byte>)
                  << call("int", &Arguments::test_append<int>)
                  << call("char const *", &Arguments::test_append<char const *>)
                  << call("string", &Arguments::test_append<std::string>)
                  << call("string", &Arguments::test_append<std::string>)
                  << []{
                       auto rec = Stream{"Record"};
                       rec << call("bytes", &Arguments::test_append_record<record::Bytes>)
                           << call("json", &Arguments::test_append_record<record::Json>)
                           << call("tcf", &Arguments::test_append_record<record::tcf::Version1>)
                           << END;
                       return move(rec);
                     }()
                  << END;
                return move(app);
            }()
         << END;
  return finalize(series);
}
#endiv
