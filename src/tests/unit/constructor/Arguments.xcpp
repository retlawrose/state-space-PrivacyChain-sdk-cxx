// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <fpp>
namespace tests::unit::constructor { class Arguments; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import iab.privacychain.constructor.Arguments
class tests::unit::constructor::Arguments : public cppunit::test::Fixture {
public:
  using Subject = ::iab::privacychain::constructor::Arguments;
  auto test_constructor() -> void;
  auto test_string_count() -> void;
  template<typename TYPE> auto test_stringify() -> void;
  template<typename TYPE> auto test_append() -> void;
  template<typename TYPE> auto test_stringify_record() -> void;
  template<typename TYPE> auto test_append_record() -> void;
  static auto suite() -> cppunit::Test *;
  template<typename TYPE> struct Palette;
};
#import iab.privacychain.Record // e.g. record::Bytes
namespace tests::unit::constructor {
  template<> struct Arguments::Palette<::iab::privacychain::record::Bytes>;
}
namespace tests::unit::constructor {
  template<> auto Arguments::test_stringify_record<::iab::privacychain::record::Bytes>() -> void;
  template<> auto Arguments::test_stringify_record<::iab::privacychain::record::Json>() -> void;
  template<> auto Arguments::test_stringify_record<::iab::privacychain::record::tcf::V1>() -> void;
  //
  template<> auto Arguments::test_append_record<::iab::privacychain::record::Bytes>() -> void;
  template<> auto Arguments::test_append_record<::iab::privacychain::record::Json>() -> void;
  template<> auto Arguments::test_append_record<::iab::privacychain::record::tcf::V1>() -> void;
}
#endiv
#divert <tpp>
#import tests.unit.constructor.Arguments.Palette
#import std.cerr
#import std.ostringstream
#import std.type_info
template<typename TYPE> auto tests::unit::constructor::Arguments::test_stringify() -> void {
  Palette<TYPE> palette;
  std::ostringstream buf;
  buf << typeid(TYPE).name()
      << ' ' << Subject::stringify(palette.zero) // <----- test this
      << ' ' << Subject::stringify(palette.one) // <------ and so on
      << ' ' << Subject::stringify(palette.two)
      << ' ' << Subject::stringify(palette.a)
      << ' ' << Subject::stringify(palette.b)
      << ' ' << Subject::stringify(palette.c)
      << '\n';
    ;
  std::cerr << buf.str();
}
#import json.Value
#import json.value.constants
template<typename TYPE> auto tests::unit::constructor::Arguments::test_append() -> void {
  Palette<TYPE> palette;
  json::Value array{json::value::ARRAY};
  Subject subject{array};
  subject.append(palette.zero); // <----- test this
  subject.append(palette.one); // <------ and so on
  subject.append(palette.two);
  subject.append(palette.a);
  subject.append(palette.b);
  subject.append(palette.c);
  { std::ostringstream buf;
    buf << typeid(TYPE).name() << ' ' << array << '\n';
    std::cerr << buf.str(); }
}
#endiv
#divert <cpp>
auto tests::unit::constructor::Arguments::test_constructor() -> void {
  json::Value array{json::value::ARRAY};
  Subject subject{array}; // <------------- test this (whoop! there it is!)
  CPPUNIT_ASSERT(true);
}
auto tests::unit::constructor::Arguments::test_string_count() -> void {
  { auto specimen = std::string(1, 'b'); // <---------- PARENTHESIS gives string(count, char)
    CPPUNIT_ASSERT(1 == specimen.size());
    CPPUNIT_ASSERT('b' == specimen.front()); }
  { auto specimen = std::string{1, 'b'}; // <---------- BRACKETS gives string{initializer_list<char>}
    CPPUNIT_ASSERT(2 == specimen.size());
    CPPUNIT_ASSERT('\001' == specimen.front());
    CPPUNIT_ASSERT('b' == specimen.back()); }
}
namespace tests::unit::constructor {
  template<> auto Arguments::test_stringify_record<::iab::privacychain::record::Bytes>() -> void {
    using Value = ::iab::privacychain::record::Bytes;
    Palette<Value> palette;
    json::Value array{json::value::ARRAY};
    Subject subject{array};
    ::iab::privacychain::Record specimen{palette.single};
    std::ostringstream buf;
    buf << typeid(Value).name() << ' ' << Subject::stringify(specimen) << '\n'; // <----------------- test this
    std::cerr << buf.str();
  }
  template<> auto Arguments::test_stringify_record<::iab::privacychain::record::Json>() -> void {
#warning WRITETEHIS auto Arguments::test_stringify_record<::iab::privacychain::record::Json>() -> void
    CPPUNIT_ASSERT(true);
  }
  template<> auto Arguments::test_stringify_record<::iab::privacychain::record::tcf::V1>() -> void {
#warning WRITETEHIS auto Arguments::test_stringify_record<::iab::privacychain::record::tcf::V1>() -> void
    CPPUNIT_ASSERT(true);
  }
  template<> auto Arguments::test_append_record<::iab::privacychain::record::Bytes>() -> void {
    using Value = ::iab::privacychain::record::Bytes;
    Palette<Value> palette;
    json::Value array{json::value::ARRAY};
    Subject subject{array};
    subject.append(palette.single); // <------------------------- test this
    { std::ostringstream buf;
      buf << typeid(Value).name() << ' ' << array << '\n';
      std::cerr << buf.str(); }
  }
  template<> auto Arguments::test_append_record<::iab::privacychain::record::Json>() -> void {
#warning WRITETEHIS auto Arguments::test_append_record<::iab::privacychain::record::Json>() -> void
    CPPUNIT_ASSERT(true);
  }
  template<> auto Arguments::test_append_record<::iab::privacychain::record::tcf::V1>() -> void {
#warning WRITETEHIS auto Arguments::test_append_record<::iab::privacychain::record::tcf::V1>() -> void
    CPPUNIT_ASSERT(true);
  }
}
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::constructor::Arguments::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("Arguments");
  series << call("constructor", &Arguments::test_constructor)
         << call("string-count", &Arguments::test_string_count)
    ;
  {
    Stream str("stringify");
    // The pantheon here OUGHT to be a superset of the specializations in Arguments.xcpp
    str << call("char", &Arguments::test_stringify<char>)
        << call("byte", &Arguments::test_stringify<std::byte>)
        << call("int", &Arguments::test_stringify<int>)
        << call("char const *", &Arguments::test_stringify<char const *>)
        << call("string", &Arguments::test_stringify<std::string>)
        << call("string_view", &Arguments::test_stringify<std::string_view>)
      ;
    {
      Stream rec("Record");
      namespace record = ::iab::privacychain::record;
      rec << call("bytes", &Arguments::test_stringify_record<record::Bytes>)
          << call("json", &Arguments::test_stringify_record<record::Json>)
          << call("tcf", &Arguments::test_stringify_record<record::tcf::V1>)
        ;
      str << add(rec.release());
    }
    series << add(str.release());
  } {
    Stream app("append");
    app << call("char", &Arguments::test_append<char>)
        << call("byte", &Arguments::test_append<std::byte>)
        << call("int", &Arguments::test_append<int>)
        << call("char const *", &Arguments::test_append<char const *>)
        << call("string", &Arguments::test_append<std::string>)
        << call("string", &Arguments::test_append<std::string>)
      ;
    {
      Stream rec("Record");
      namespace record = ::iab::privacychain::record;
      rec << call("bytes", &Arguments::test_append_record<record::Bytes>)
          << call("json", &Arguments::test_append_record<record::Json>)
          << call("tcf", &Arguments::test_append_record<record::tcf::V1>)
        ;
      app << add(rec.release());
    }
    series << add(app.release());
  }
  return series.release();
}
#endiv
