// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::transaction { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::transaction::Fixture : public cppunit::test::Fixture {
  auto test_usage_Identifier() -> void;
  auto test_usage_History() -> void;
  auto test_usage_Record() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import iab.privacychain.transaction.Identifier
auto tests::unit::transaction::Fixture::test_usage_Identifier() -> void {
  CPPUNIT_ASSERT(true);
}
#import iab.privacychain.transaction.Record
auto tests::unit::transaction::Fixture::test_usage_Record() -> void {
  CPPUNIT_ASSERT(true);
}
#import iab.privacychain.transaction.History
auto tests::unit::transaction::Fixture::test_usage_History() -> void {
  CPPUNIT_ASSERT(true);
}
#import tests.unit.transaction.Identifier
#import tests.unit.transaction.Record
#import tests.unit.transaction.History
auto tests::unit::transaction::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"transaction"};
  series << []{
              auto use = Stream{"usage"};
              use << call("Identifier", &Fixture::test_usage_Identifier)
                  << call("Record", &Fixture::test_usage_Record)
                  << call("History", &Fixture::test_usage_History)
                  << END;
              return move(use);
            }()
         << add<Identifier>()
         << add<Record>()
         << add<History>()
         << END;
  return finalize(series);
}
#endiv
