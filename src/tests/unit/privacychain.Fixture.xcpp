// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/PrivacyChain-sdk-c++/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::privacychain { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::privacychain::Fixture : public cppunit::test::Fixture {
public:
  auto test_Success() -> void;
  template<typename TYPE> auto test_Outcome() -> void;
  auto test_exception_Aspect() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  struct Exceptional;
};
namespace tests::unit::privacychain {
  template<> auto Fixture::test_Outcome<bool>() -> void;
  template<> auto Fixture::test_Outcome<int>() -> void;
  template<> auto Fixture::test_Outcome<std::string>() -> void;
}
#endiv
#divert <cpp>
#import std.string_literals
using namespace std::string_literals;
#import std.error_code
#import std.generic_category
#import iab.privacychain.Success
auto tests::unit::privacychain::Fixture::test_Success() -> void {
  using namespace ::iab::privacychain;
  auto good = Success{SUCCESS};
  CPPUNIT_ASSERT(ok(good));
  auto bad = Success{std::error_code{1, std::generic_category()}};
  CPPUNIT_ASSERT(!ok(bad));
}
#import iab.privacychain.Outcome
template<> auto tests::unit::privacychain::Fixture::test_Outcome<bool>() -> void {
  using namespace ::iab::privacychain;
  auto good = Outcome<bool>{true};
  CPPUNIT_ASSERT(ok(good));
  auto regood = value(good);
  CPPUNIT_ASSERT(regood);
  auto bad = Success{std::error_code{1, std::generic_category()}};
  CPPUNIT_ASSERT(!ok(bad));
}
template<> auto tests::unit::privacychain::Fixture::test_Outcome<int>() -> void {
  using namespace ::iab::privacychain;
  auto good = Outcome<int>{2};
  CPPUNIT_ASSERT(ok(good));
  auto regood = value(good);
  CPPUNIT_ASSERT(2 == regood);
  auto bad = Success{std::error_code{1, std::generic_category()}};
  CPPUNIT_ASSERT(!ok(bad));
}
template<> auto tests::unit::privacychain::Fixture::test_Outcome<std::string>() -> void {
  using namespace ::iab::privacychain;
  auto good = Outcome<std::string>{"Powerball Winner!"s};
  CPPUNIT_ASSERT(ok(good));
  auto regood = value(good);
  CPPUNIT_ASSERT("Powerball Winner!"s == regood);
  auto bad = Success{std::error_code{1, std::generic_category()}};
  CPPUNIT_ASSERT(!ok(bad));
}
#import tests.unit.privacychain.Fixture.Exceptional
auto tests::unit::privacychain::Fixture::test_exception_Aspect() -> void {
  try {
    throw Exceptional{"wow"};
  } catch (::iab::privacychain::exception::Aspect const &e) {
    auto const what = std::string{e.what()};
    CPPUNIT_ASSERT_EQUAL("wow"s, what);
  }
}
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::privacychain::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("privacychain");
  series << call("Success", &Fixture::test_Success)
    ;
  {
    Stream out("Outcome");
    out << call("bool", &Fixture::test_Outcome<bool>)
        << call("int", &Fixture::test_Outcome<int>)
        << call("std::string", &Fixture::test_Outcome<std::string>)
      ;
    series << add(out.release());
  }
  series << call("exception::Aspect", &Fixture::test_exception_Aspect)
    ;
  return series.release();
}
#endiv
